CREATE TABLE `weekly_report` (
	`id` INT(11) NOT NULL AUTO_INCREMENT,
	`user_id` VARCHAR(50) NOT NULL,
	`started` VARCHAR(8) NULL DEFAULT NULL,
	`year` VARCHAR(4) NULL DEFAULT NULL,
	`month` VARCHAR(2) NULL DEFAULT NULL,
	`week` VARCHAR(2) NULL DEFAULT NULL,
	`gubun` VARCHAR(50) NULL DEFAULT NULL,
	`document_num` VARCHAR(50) NULL DEFAULT NULL,
	`title` VARCHAR(200) NULL DEFAULT NULL,
	`content` TEXT NULL DEFAULT NULL,
	`issues` VARCHAR(200) NULL DEFAULT NULL,
	`complate` VARCHAR(10) NULL DEFAULT NULL,
	`type` VARCHAR(10) NULL DEFAULT NULL,
	`reg_dt` DATETIME NULL DEFAULT CURRENT_TIMESTAMP,
	`old_id` INT(11) NULL DEFAULT NULL,
	PRIMARY KEY (`id`),
	INDEX `WEEKLY_REPORT_IDX1` (`user_id`, `started`)
)
COMMENT='id, gubun, document_num, title ,content'
COLLATE='utf8_general_ci'
ENGINE=InnoDB
AUTO_INCREMENT=1
;

ALTER TABLE weekly_report ADD UNIQUE  WEEKLY_REPORT_UNIQUE (USER_ID,STARTED,YEAR ,MONTH,WEEK ,OLD_ID);

회원


CREATE TABLE `member` (
	`id` INT(11) NOT NULL AUTO_INCREMENT,
	`user_id` VARCHAR(200) NULL DEFAULT '0',
	`password` VARCHAR(255) NULL DEFAULT '0',
	`name` VARCHAR(100) NULL DEFAULT '0',
	`levels` INT(1) NULL DEFAULT NULL,
	`part` VARCHAR(50) NULL DEFAULT NULL,
	`commute` VARCHAR(10) NULL DEFAULT NULL,
	`use_yn` VARCHAR(1) NULL DEFAULT 'Y',
	PRIMARY KEY (`id`),
	INDEX `rpt_member_idx1` (`user_id`)
)
COLLATE='utf8_general_ci'
ENGINE=InnoDB
AUTO_INCREMENT=1
;


공통코드


CREATE TABLE `cmn_code` (
	`id` INT(5) NOT NULL AUTO_INCREMENT,
	`type` VARCHAR(10) NULL DEFAULT NULL,
	`menu` VARCHAR(50) NULL DEFAULT NULL,
	`part` VARCHAR(20) NULL DEFAULT NULL,
	`class` VARCHAR(10) NULL DEFAULT NULL,
	`name` VARCHAR(50) NULL DEFAULT NULL,
	`value` VARCHAR(255) NULL DEFAULT NULL,
	`orders` INT(11) NULL DEFAULT NULL,
	PRIMARY KEY (`id`)
)
COMMENT='공통코드'
COLLATE='utf8_general_ci'
ENGINE=InnoDB
AUTO_INCREMENT=1
;

#INSERT INTO `report`.`cmn_code` (`type`, `class`, `code`, `value`) VALUES ('SELECT', 'COMPLETE', '완료', '완료');

CREATE TABLE `weekly_report_close` (
	`started` VARCHAR(8) NOT NULL DEFAULT '0',
	`user_id` VARCHAR(50) NOT NULL,
	`close_yn` VARCHAR(1) NOT NULL DEFAULT 'N',
	`reg_dt` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
	`upd_dt` DATETIME NOT NULL,
	PRIMARY KEY (`started`)
)
COLLATE='utf8_general_ci'
ENGINE=InnoDB
;



CREATE TABLE `notice` (
	`id` INT(11) NOT NULL AUTO_INCREMENT,
	`user_id` VARCHAR(100) NOT NULL,
	`title` VARCHAR(255) NOT NULL,
	`content` TEXT NOT NULL,
	`reg_dt` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
	PRIMARY KEY (`id`)
)
ENGINE=InnoDB
;


CREATE TABLE `report_rank` (
	`user_id` VARCHAR(100) NULL DEFAULT NULL,
	`part` VARCHAR(10) NULL DEFAULT NULL,
	`gubun` VARCHAR(100) NULL DEFAULT NULL,
	`r_cnt` INT(11) NULL DEFAULT NULL,
	`r_rank` INT(11) NULL DEFAULT NULL,
	UNIQUE INDEX `user_id` (`user_id`, `part`, `gubun`)
)
COMMENT=' ,part ,gubun ,r_count ,rank'
COLLATE='utf8_general_ci'
ENGINE=InnoDB
;




CREATE TABLE `yearly_mstr` (
	`user_id` VARCHAR(50) NULL DEFAULT NULL,
	`year` VARCHAR(4) NULL DEFAULT NULL,
	`total_day` FLOAT NULL DEFAULT '15',
	`use_day` FLOAT NULL DEFAULT '0'
)
COLLATE='utf8_general_ci'
ENGINE=InnoDB
;








BEGIN
		DECLARE v_cnt, v_rank ,V_ROW_CNT INT DEFAULT 0;
		DECLARE v_user_id ,v_part ,v_gubun varchar(50) DEFAULT "";	
		#insert into report_gubun_rank
	   DECLARE not_found bool DEFAULT FALSE;
				    
		#DEClARE cur_list CURSOR FOR
		
		
		DELETE FROM report_rank;
		
		
		INSERT into report_rank 
		select 
			x.user_id ,x.part ,x.gubun ,x.cnt
		  ,row_number() over (partition by x.user_id ,x.name ,x.part order by x.cnt desc) as rank
		from(
				select a.user_id ,a.name ,a.part ,case when b.gubun is null then 'ALL' else b.gubun end as gubun
				,count(b.title) as cnt  
				From member a 
				left outer join weekly_report b 
				on a.user_id = b.user_id
				group by a.user_id ,a.name ,a.part ,b.gubun
		)x;
		
		
		select count(1) into v_row_cnt from report_rank;
		
		if v_row_cnt < 1 then
			rollback;
		end if;

		/*
		DECLARE CONTINUE HANDLER FOR NOT FOUND SET not_found = TRUE;
		
		 OPEN cur_list;
		 
		 cur_loop: LOOP
		 
		 FETCH cur_list INTO v_user_id ,v_part ,v_gubun ,v_cnt ,v_rank ;
		 
		  	IF not_found THEN 
            LEAVE cur_loop;
        	ELSE
        	
		 		IF v_gubun IS NULL THEN
		 			SET v_gubun := 'ALL';
		 		END IF;
		 		
		 				 	
			   INSERT into report_rank (user_id ,part ,gubun ,r_cnt ,r_rank) VALUES (v_user_id ,v_part ,v_gubun ,v_cnt ,v_rank) ON
			   DUPLICATE KEY 
				UPDATE r_cnt = (r_cnt + v_cnt)  ,r_rank = (r_rank + v_rank);

			
  			END IF;
		 END LOOP cur_loop;
		 CLOSE cur_list;
		 */
		 
		
END
